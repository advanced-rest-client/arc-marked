/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/tools/tree/master/packages/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   ArcMarked.js
 */


// tslint:disable:variable-name Describing an API that's defined elsewhere.
// tslint:disable:no-any describes the API as best we are able today

import {html, css, LitElement} from 'lit-element';

/**
 * Element wrapper for the [marked](https://github.com/chjj/marked) library.
 *
 * Based on Polymer's `marked-element`.
 *
 * `<marked-element>` accepts Markdown source and renders it to a child
 * element with the class `markdown-html`. This child element can be styled
 * as you would a normal DOM element. If you do not provide a child element
 * with the `markdown-html` class, the Markdown source will still be rendered,
 * but to a shadow DOM child that cannot be styled.
 *
 * ### Markdown Content
 *
 * The Markdown source can be specified several ways:
 *
 * #### Use the `markdown` attribute to bind markdown
 *
 * ```html
 * <marked-element markdown="`Markdown` is _awesome_!">
 *   <div slot="markdown-html"></div>
 * </marked-element>
 * ```
 * #### Use `<script type="text/markdown">` element child to inline markdown
 *
 * ```html
 * <marked-element>
 *   <div slot="markdown-html"></div>
 *   <script type="text/markdown">
 *     Check out my markdown!
 *     We can even embed elements without fear of the HTML parser mucking up their
 *     textual representation:
 *   </script>
 * </marked-element>
 * ```
 * #### Use `<script type="text/markdown" src="URL">` element child to specify remote markdown
 *
 * ```html
 * <marked-element>
 *   <div slot="markdown-html"></div>
 *   <script type="text/markdown" src="../guidelines.md"></script>
 * </marked-element>
 * ```
 *
 * Note that the `<script type="text/markdown">` approach is *static*. Changes to
 * the script content will *not* update the rendered markdown!
 *
 * Though, you can data bind to the `src` attribute to change the markdown.
 *
 * ```html
 * <marked-element>
 *   <div slot="markdown-html"></div>
 *   <script type="text/markdown" src$="[[source]]"></script>
 * </marked-element>
 * <script>
 *   ...
 *   this.source = '../guidelines.md';
 * </script>
 * ```
 *
 * ### Styling
 *
 * If you are using a child with the `markdown-html` class, you can style it
 * as you would a regular DOM element:
 *
 * ```css
 * [slot="markdown-html"] p {
 *   color: red;
 * }
 * [slot="markdown-html"] td:first-child {
 *   padding-left: 24px;
 * }
 * ```
 */
declare class ArcMarked extends LitElement {
  markdown: any;
  breaks: any;
  pedantic: any;
  renderer: any;
  sanitize: any;
  sanitizer: any;
  smartypants: any;
  readonly outputElement: any;
  constructor();
  connectedCallback(): void;
  disconnectedCallback(): void;
  firstUpdated(): void;
  render(): any;
  _setObservableProperty(prop: any, value: any): any;

  /**
   * Unindents the markdown source that will be rendered.
   */
  unindent(text: string): string;

  /**
   * Renders `markdown` into this element's DOM.
   *
   * This is automatically called whenever the `markdown` property is changed.
   *
   * The only case where you should be calling this is if you are providing
   * markdown via `<script type="text/markdown">` after this element has been
   * constructed (or updating that markdown).
   */
  renderMarkdown(): void;

  /**
   * Fired when the content is being processed and before it is rendered.
   * Provides an opportunity to highlight code blocks based on the programming
   * language used. This is also known as syntax highlighting. One example would
   * be to use a prebuilt syntax highlighting library, e.g with
   * [highlightjs](https://highlightjs.org/).
   */
  _highlight(code: string, lang: string): string;
  _unindent(text: string): string;

  /**
   * Fired when the XHR finishes loading
   */
  _request(url: string): void;

  /**
   * Fired when an error is received while fetching remote markdown content.
   */
  _handleError(e: Event): void;
  _onScriptAttributeChanged(mutation: MutationRecord[]): void;
}
